name: React Vite CI/CD

on:
  push:
    branches: [ "main", "release" ]
  pull_request:
    branches: [ "main", "release" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v2
      
      # Node.js 환경 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # npm 캐싱 추가
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 의존성 설치
      - name: Install dependencies
        run: npm install

      # 빌드 실행
      - name: Build project
        run: npm run build

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bitta-front:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/bitta-front:latest
          
  deploy:
    if: github.ref == 'refs/heads/release'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # EC2 서버에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/bitta-front:latest

            # 현재 활성화된 blue/green 컨테이너 확인
            CURRENT_CONTAINER=$(docker ps --filter "name=frontend-blue" -q)
            if [ -n "$CURRENT_CONTAINER" ]; then
              # blue가 활성화된 경우 green으로 전환
              TARGET_CONTAINER="frontend-green"
            else
              # green이 활성화된 경우 blue로 전환
              TARGET_CONTAINER="frontend-blue"
            fi

            # 새 컨테이너 시작
            docker stop $TARGET_CONTAINER || true
            docker rm $TARGET_CONTAINER || true
            docker run -d --name $TARGET_CONTAINER -p 3000:80 \
              -e NODE_ENV=production \
              ${{ secrets.DOCKER_USERNAME }}/bitta-front:latest

            # Nginx 리로드하여 트래픽 전환
            sudo systemctl reload nginx

      # Blue-Green 설정 Docker Compose 실행
      - name: Deploy with Docker Compose on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/bitta-project
            docker-compose down
            docker-compose up -d --no-deps
            sudo nginx -s reload